var define;
!(function (e, t) {
  "object" == typeof exports && "object" == typeof module ? module.exports = t(require("react")) : "function" == typeof define && define.amd ? define(["react"], t) : "object" == typeof exports ? exports.ReactSVGBrush = t(require("react")) : e.ReactSVGBrush = t(e.React);
})(window, function (e) {
  return (function (e) {
    var t = {};
    function n(r) {
      if (t[r]) return t[r].exports;
      var o = t[r] = {
        i: r,
        l: !1,
        exports: {}
      };
      return (e[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports);
    }
    return (n.m = e, n.c = t, n.d = function (e, t, r) {
      n.o(e, t) || Object.defineProperty(e, t, {
        enumerable: !0,
        get: r
      });
    }, n.r = function (e) {
      ("undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(e, "__esModule", {
        value: !0
      }));
    }, n.t = function (e, t) {
      if ((1 & t && (e = n(e)), 8 & t)) return e;
      if (4 & t && "object" == typeof e && e && e.__esModule) return e;
      var r = Object.create(null);
      if ((n.r(r), Object.defineProperty(r, "default", {
        enumerable: !0,
        value: e
      }), 2 & t && "string" != typeof e)) for (var o in e) n.d(r, o, (function (t) {
        return e[t];
      }).bind(null, o));
      return r;
    }, n.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };
      return (n.d(t, "a", t), t);
    }, n.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, n.p = "/", n(n.s = 0));
  })([function (e, t, n) {
    e.exports = n(1);
  }, function (e, t, n) {
    "use strict";
    (Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.SVGBrush = void 0);
    var r = Object.assign || (function (e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    }), o = function (e, t) {
      if (Array.isArray(e)) return e;
      if ((Symbol.iterator in Object(e))) return (function (e, t) {
        var n = [], r = !0, o = !1, i = void 0;
        try {
          for (var s, a = e[Symbol.iterator](); !(r = (s = a.next()).done) && (n.push(s.value), !t || n.length !== t); r = !0) ;
        } catch (e) {
          (o = !0, i = e);
        } finally {
          try {
            !r && a.return && a.return();
          } finally {
            if (o) throw i;
          }
        }
        return n;
      })(e, t);
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }, i = (function () {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          (r.enumerable = r.enumerable || !1, r.configurable = !0, ("value" in r) && (r.writable = !0), Object.defineProperty(e, r.key, r));
        }
      }
      return function (t, n, r) {
        return (n && e(t.prototype, n), r && e(t, r), t);
      };
    })(), s = n(2), a = c(s), u = c(n(3));
    function c(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    var l = (function (e) {
      function t(e) {
        !(function (e, t) {
          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        })(this, t);
        var n = (function (e, t) {
          if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !t || "object" != typeof t && "function" != typeof t ? e : t;
        })(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
        return (h.call(n), n.state = {
          selection: null
        }, n.move = null, n);
      }
      return ((function (e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
        (e.prototype = Object.create(t && t.prototype, {
          constructor: {
            value: e,
            enumerable: !1,
            writable: !0,
            configurable: !0
          }
        }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t));
      })(t, e), i(t, [{
        key: "_renderOverlay",
        value: function () {
          var e = this, t = this.props, n = o(t.extent, 2), r = o(n[0], 2), i = r[0], s = r[1], u = o(n[1], 2), c = u[0], l = u[1], h = t.brushType;
          return a.default.createElement("rect", {
            className: "overlay",
            pointerEvents: "all",
            cursor: "crosshair",
            fill: "none",
            x: i,
            y: s,
            width: c - i,
            height: l - s,
            onPointerDown: this._handleBrushStart,
            onPointerMove: function (t) {
              if (e.move) {
                var n = e.props.getEventMouse(t), r = o(n, 2), a = r[0], u = r[1], d = o(e.move, 2), p = d[0], f = d[1], v = e.state.selection;
                switch (h) {
                  case "2d":
                    v = [[Math.max(Math.min(p, a), i), Math.max(Math.min(f, u), s)], [Math.min(Math.max(p, a), c), Math.min(Math.max(f, u), l)]];
                    break;
                  case "x":
                    v = [[Math.min(p, a), s], [Math.max(p, a), l]];
                    break;
                  case "y":
                    v = [[i, Math.min(f, u)], [c, Math.max(f, u)]];
                }
                (e.setState({
                  selection: v
                }), e.props.onBrush({
                  target: e,
                  type: "brush",
                  selection: v,
                  sourceEvent: t
                }));
              }
            },
            onPointerUp: function (t) {
              var n = e.props.getEventMouse(t), r = e.state.selection;
              (e.move && e.move[0] === n[0] && e.move[1] === n[1] && (r = null, e.props.onBrush({
                target: e,
                type: "brush",
                selection: r,
                sourceEvent: t
              })), e.move = null, e.setState({
                selection: r
              }), e.props.onBrushEnd({
                target: e,
                type: "end",
                selection: r,
                sourceEvent: t
              }));
            }
          });
        }
      }, {
        key: "_renderSelection",
        value: function () {
          var e = this, t = this.props, n = o(t.extent, 2), r = o(n[0], 2), i = r[0], s = r[1], u = o(n[1], 2), c = u[0], l = u[1], h = t.brushType, d = this.state.selection;
          if (!d) return null;
          var p = o(d, 2), f = o(p[0], 2), v = f[0], m = f[1], y = o(p[1], 2), b = y[0], E = y[1], P = v, g = m, w = b - v, S = E - m, _ = function (e) {
            return Math.min(Math.max(e, i), c);
          }, x = function (e) {
            return Math.min(Math.max(e, s), l);
          };
          return a.default.createElement(a.default.Fragment, null, a.default.createElement("rect", {
            className: "selection",
            cursor: "move",
            fill: "#777",
            fillOpacity: "0.3",
            stroke: "#fff",
            shapeRendering: "crispEdges",
            x: P,
            y: g,
            width: w,
            height: S,
            onPointerDown: this._handleBrushStart,
            onPointerMove: function (t) {
              if (e.move) {
                var n = e.props.getEventMouse(t), r = o(n, 2), a = r[0], u = r[1], d = o(e.move, 2), p = d[0], f = u - d[1], y = (function (e, t, n) {
                  return e + n < i ? [i, t + (i - e)] : t + n > c ? [e + (c - t), c] : [e + n, t + n];
                })(v, b, a - p), P = o(y, 2), g = P[0], w = P[1], S = (function (e, t, n) {
                  return e + n < s ? [s, t + (s - e)] : t + n > l ? [e + (l - t), l] : [e + n, t + n];
                })(m, E, f), _ = o(S, 2), x = _[0], B = _[1], M = e.state.selection;
                switch (h) {
                  case "2d":
                    M = [[g, x], [w, B]];
                    break;
                  case "x":
                    M = [[g, m], [w, E]];
                    break;
                  case "y":
                    M = [[v, x], [b, B]];
                }
                (e.move = [a, u], e.setState({
                  selection: M
                }), e.props.onBrush({
                  target: e,
                  type: "brush",
                  selection: M,
                  sourceEvent: t
                }));
              }
            },
            onPointerUp: this._handleBrushEnd
          }), a.default.createElement("rect", {
            ref: function (t) {
              return e.handleN = t;
            },
            className: "handle handle--n",
            cursor: "ns-resize",
            x: P - 5,
            y: g - 5,
            width: w + 10,
            height: 10,
            fill: "none",
            pointerEvents: "visible",
            onPointerDown: this._handleBrushStart,
            onPointerMove: function (t) {
              if (e.move) {
                var n = e.props.getEventMouse(t), r = o(n, 2), i = r[0], s = r[1], a = o(e.move, 2), u = (a[0], a[1]), c = x(m + (s - u)), l = o(c < E ? [c, E] : [E, E], 2), d = l[0], p = l[1], f = e.state.selection;
                switch (h) {
                  case "2d":
                  case "y":
                    f = [[v, d], [b, p]];
                }
                if ((e.move = [i, s], e.setState({
                  selection: f
                }), e.props.onBrush({
                  target: e,
                  type: "brush",
                  selection: f,
                  sourceEvent: t
                }), c >= E)) return void e.handleS.setPointerCapture(t.pointerId);
              }
            },
            onPointerUp: this._handleBrushEnd
          }), a.default.createElement("rect", {
            ref: function (t) {
              return e.handleE = t;
            },
            className: "handle handle--e",
            cursor: "ew-resize",
            x: P + w - 5,
            y: g - 5,
            width: 10,
            height: S + 10,
            fill: "none",
            pointerEvents: "visible",
            onPointerDown: this._handleBrushStart,
            onPointerMove: function (t) {
              if (e.move) {
                var n = e.props.getEventMouse(t), r = o(n, 2), i = r[0], s = r[1], a = o(e.move, 2), u = a[0], c = (a[1], _(b + (i - u))), l = o(v < c ? [v, c] : [v, v], 2), d = l[0], p = l[1], f = e.state.selection;
                switch (h) {
                  case "2d":
                  case "x":
                    f = [[d, m], [p, E]];
                }
                if ((e.move = [i, s], e.setState({
                  selection: f
                }), e.props.onBrush({
                  target: e,
                  type: "brush",
                  selection: f,
                  sourceEvent: t
                }), v >= c)) return void e.handleW.setPointerCapture(t.pointerId);
              }
            },
            onPointerUp: this._handleBrushEnd
          }), a.default.createElement("rect", {
            ref: function (t) {
              return e.handleS = t;
            },
            className: "handle handle--s",
            cursor: "ns-resize",
            x: P - 5,
            y: g + S - 5,
            width: w + 10,
            height: 10,
            fill: "none",
            pointerEvents: "visible",
            onPointerDown: this._handleBrushStart,
            onPointerMove: function (t) {
              if (e.move) {
                var n = e.props.getEventMouse(t), r = o(n, 2), i = r[0], s = r[1], a = o(e.move, 2), u = (a[0], a[1]), c = x(E + (s - u)), l = o(m < c ? [m, c] : [m, m], 2), d = l[0], p = l[1], f = e.state.selection;
                switch (h) {
                  case "2d":
                  case "y":
                    f = [[v, d], [b, p]];
                }
                if ((e.move = [i, s], e.setState({
                  selection: f
                }), e.props.onBrush({
                  target: e,
                  type: "brush",
                  selection: f,
                  sourceEvent: t
                }), m >= c)) return void e.handleN.setPointerCapture(t.pointerId);
              }
            },
            onPointerUp: this._handleBrushEnd
          }), a.default.createElement("rect", {
            ref: function (t) {
              return e.handleW = t;
            },
            className: "handle handle--w",
            cursor: "ew-resize",
            x: P - 5,
            y: g - 5,
            width: 10,
            height: S + 10,
            fill: "none",
            pointerEvents: "visible",
            onPointerDown: this._handleBrushStart,
            onPointerMove: function (t) {
              if (e.move) {
                var n = e.props.getEventMouse(t), r = o(n, 2), i = r[0], s = r[1], a = o(e.move, 2), u = a[0], c = (a[1], _(v + (i - u))), l = o(c < b ? [c, b] : [b, b], 2), d = l[0], p = l[1], f = e.state.selection;
                switch (h) {
                  case "2d":
                  case "x":
                    f = [[d, m], [p, E]];
                }
                if ((e.move = [i, s], e.setState({
                  selection: f
                }), e.props.onBrush({
                  target: e,
                  type: "brush",
                  selection: f,
                  sourceEvent: t
                }), c >= b)) return void e.handleE.setPointerCapture(t.pointerId);
              }
            },
            onPointerUp: this._handleBrushEnd
          }), a.default.createElement("rect", {
            ref: function (t) {
              return e.handleNW = t;
            },
            className: "handle handle--nw",
            cursor: "nwse-resize",
            x: P - 5,
            y: g - 5,
            width: 10,
            height: 10,
            fill: "none",
            pointerEvents: "visible",
            onPointerDown: this._handleBrushStart,
            onPointerMove: function (t) {
              if (e.move) {
                var n = e.props.getEventMouse(t), r = o(n, 2), i = r[0], s = r[1], a = o(e.move, 2), u = i - a[0], c = s - a[1], l = v, d = m, p = void 0, f = void 0, y = void 0, P = void 0, g = e.state.selection;
                switch (h) {
                  case "2d":
                    var w = [_(v + u), x(m + c)];
                    d = w[1];
                    var S = o((l = w[0]) < b ? [l, b] : [b, b], 2);
                    (p = S[0], f = S[1]);
                    var B = o(d < E ? [d, E] : [E, E], 2);
                    g = [[p, y = B[0]], [f, P = B[1]]];
                    break;
                  case "x":
                    var M = [_(v + u), m];
                    d = M[1];
                    var O = o((l = M[0]) < b ? [l, b] : [b, b], 2);
                    (p = O[0], f = O[1], g = [[p, m], [f, E]]);
                    break;
                  case "y":
                    var C = [v, x(m + c)];
                    l = C[0];
                    var j = o((d = C[1]) < E ? [d, E] : [E, E], 2);
                    (y = j[0], P = j[1], g = [[v, y], [b, P]]);
                }
                if ((e.move = [i, s], e.setState({
                  selection: g
                }), e.props.onBrush({
                  target: e,
                  type: "brush",
                  selection: g,
                  sourceEvent: t
                }), l >= b && d >= E)) return void e.handleSE.setPointerCapture(t.pointerId);
                if (l >= b) return void e.handleNE.setPointerCapture(t.pointerId);
                if (d >= E) return void e.handleSW.setPointerCapture(t.pointerId);
              }
            },
            onPointerUp: this._handleBrushEnd
          }), a.default.createElement("rect", {
            ref: function (t) {
              return e.handleNE = t;
            },
            className: "handle handle--ne",
            cursor: "nesw-resize",
            x: P + w - 5,
            y: g - 5,
            width: 10,
            height: 10,
            fill: "none",
            pointerEvents: "visible",
            onPointerDown: this._handleBrushStart,
            onPointerMove: function (t) {
              if (e.move) {
                var n = e.props.getEventMouse(t), r = o(n, 2), i = r[0], s = r[1], a = o(e.move, 2), u = i - a[0], c = s - a[1], l = b, d = m, p = void 0, f = void 0, y = void 0, P = void 0, g = e.state.selection;
                switch (h) {
                  case "2d":
                    var w = [_(b + u), x(m + c)];
                    d = w[1];
                    var S = o(v < (l = w[0]) ? [v, l] : [v, v], 2);
                    (p = S[0], f = S[1]);
                    var B = o(d < E ? [d, E] : [E, E], 2);
                    g = [[p, y = B[0]], [f, P = B[1]]];
                    break;
                  case "x":
                    var M = [_(b + u), m];
                    d = M[1];
                    var O = o(v < (l = M[0]) ? [v, l] : [v, v], 2);
                    (p = O[0], f = O[1], g = [[p, m], [f, E]]);
                    break;
                  case "y":
                    var C = [b, x(m + c)];
                    l = C[0];
                    var j = o((d = C[1]) < E ? [d, E] : [E, E], 2);
                    (y = j[0], P = j[1], g = [[v, y], [b, P]]);
                }
                if ((e.move = [i, s], e.setState({
                  selection: g
                }), e.props.onBrush({
                  target: e,
                  type: "brush",
                  selection: g,
                  sourceEvent: t
                }), v >= l && d >= E)) return void e.handleSW.setPointerCapture(t.pointerId);
                if (v >= l) return void e.handleNW.setPointerCapture(t.pointerId);
                if (d >= E) return void e.handleSE.setPointerCapture(t.pointerId);
              }
            },
            onPointerUp: this._handleBrushEnd
          }), a.default.createElement("rect", {
            ref: function (t) {
              return e.handleSE = t;
            },
            className: "handle handle--se",
            cursor: "nwse-resize",
            x: P + w - 5,
            y: g + S - 5,
            width: 10,
            height: 10,
            fill: "none",
            pointerEvents: "visible",
            onPointerDown: this._handleBrushStart,
            onPointerMove: function (t) {
              if (e.move) {
                var n = e.props.getEventMouse(t), r = o(n, 2), i = r[0], s = r[1], a = o(e.move, 2), u = i - a[0], c = s - a[1], l = b, d = E, p = void 0, f = void 0, y = void 0, P = void 0, g = e.state.selection;
                switch (h) {
                  case "2d":
                    var w = [_(b + u), x(E + c)];
                    d = w[1];
                    var S = o(v < (l = w[0]) ? [v, l] : [v, v], 2);
                    (p = S[0], f = S[1]);
                    var B = o(m < d ? [m, d] : [m, m], 2);
                    g = [[p, y = B[0]], [f, P = B[1]]];
                    break;
                  case "x":
                    var M = [_(b + u), E];
                    d = M[1];
                    var O = o(v < (l = M[0]) ? [v, l] : [v, v], 2);
                    (p = O[0], f = O[1], g = [[p, m], [f, E]]);
                    break;
                  case "y":
                    var C = [b, x(E + c)];
                    l = C[0];
                    var j = o(m < (d = C[1]) ? [m, d] : [m, m], 2);
                    (y = j[0], P = j[1], g = [[v, y], [b, P]]);
                }
                if ((e.move = [i, s], e.setState({
                  selection: g
                }), e.props.onBrush({
                  target: e,
                  type: "brush",
                  selection: g,
                  sourceEvent: t
                }), v >= l && m >= d)) return void e.handleNW.setPointerCapture(t.pointerId);
                if (v >= l) return void e.handleSW.setPointerCapture(t.pointerId);
                if (m >= d) return void e.handleNE.setPointerCapture(t.pointerId);
              }
            },
            onPointerUp: this._handleBrushEnd
          }), a.default.createElement("rect", {
            ref: function (t) {
              return e.handleSW = t;
            },
            className: "handle handle--sw",
            cursor: "nesw-resize",
            x: P - 5,
            y: g + S - 5,
            width: 10,
            height: 10,
            fill: "none",
            pointerEvents: "visible",
            onPointerDown: this._handleBrushStart,
            onPointerMove: function (t) {
              if (e.move) {
                var n = e.props.getEventMouse(t), r = o(n, 2), i = r[0], s = r[1], a = o(e.move, 2), u = i - a[0], c = s - a[1], l = v, d = E, p = void 0, f = void 0, y = void 0, P = void 0, g = e.state.selection;
                switch (h) {
                  case "2d":
                    var w = [_(v + u), x(E + c)];
                    d = w[1];
                    var S = o((l = w[0]) < b ? [l, b] : [b, b], 2);
                    (p = S[0], f = S[1]);
                    var B = o(m < d ? [m, d] : [m, m], 2);
                    g = [[p, y = B[0]], [f, P = B[1]]];
                    break;
                  case "x":
                    var M = [_(v + u), E];
                    d = M[1];
                    var O = o((l = M[0]) < b ? [l, b] : [b, b], 2);
                    (p = O[0], f = O[1], g = [[p, m], [f, E]]);
                    break;
                  case "y":
                    var C = [v, x(E + c)];
                    l = C[0];
                    var j = o(m < (d = C[1]) ? [m, d] : [m, m], 2);
                    (y = j[0], P = j[1], g = [[v, y], [b, P]]);
                }
                if ((e.move = [i, s], e.setState({
                  selection: g
                }), e.props.onBrush({
                  target: e,
                  type: "brush",
                  selection: g,
                  sourceEvent: t
                }), l >= b && m >= d)) return void e.handleNE.setPointerCapture(t.pointerId);
                if (l >= b) return void e.handleSE.setPointerCapture(t.pointerId);
                if (m >= d) return void e.handleNW.setPointerCapture(t.pointerId);
              }
            },
            onPointerUp: this._handleBrushEnd
          }));
        }
      }, {
        key: "render",
        value: function () {
          return a.default.createElement("g", {
            className: "brush"
          }, this._renderOverlay(), this._renderSelection());
        }
      }]), t);
    })(s.PureComponent);
    (l.defaultProps = {
      extent: [[0, 0], [1, 1]],
      onBrushStart: function (e) {},
      onBrush: function (e) {},
      onBrushEnd: function (e) {},
      getEventMouse: function (e) {
        return [e.clientX, e.clientY];
      },
      brushType: "2d"
    }, l.propTypes = {
      selection: u.default.arrayOf(u.default.arrayOf(u.default.number)),
      extent: u.default.arrayOf(u.default.arrayOf(u.default.number)).isRequired,
      onBrushStart: u.default.func.isRequired,
      onBrush: u.default.func.isRequired,
      onBrushEnd: u.default.func.isRequired,
      getEventMouse: u.default.func.isRequired,
      brushType: u.default.string.isRequired
    }, l.getDerivedStateFromProps = function (e, t) {
      return r({}, t, {
        selection: void 0 === e.selection ? t.selection : e.selection
      });
    });
    var h = function () {
      var e = this;
      (this._handleBrushStart = function (t) {
        (t.target.setPointerCapture(t.pointerId), e.move = e.props.getEventMouse(t), e.props.onBrushStart({
          target: e,
          type: "start",
          selection: e.state.selection,
          sourceEvent: t
        }));
      }, this._handleBrushEnd = function (t) {
        (e.move = null, e.props.onBrushEnd({
          target: e,
          type: "end",
          selection: e.state.selection,
          sourceEvent: t
        }));
      });
    };
    (t.default = l, t.SVGBrush = l);
  }, function (t, n) {
    t.exports = e;
  }, function (e, t, n) {
    e.exports = n(4)();
  }, function (e, t, n) {
    "use strict";
    var r = n(5);
    function o() {}
    function i() {}
    (i.resetWarningCache = o, e.exports = function () {
      function e(e, t, n, o, i, s) {
        if (s !== r) {
          var a = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
          throw (a.name = "Invariant Violation", a);
        }
      }
      function t() {
        return e;
      }
      e.isRequired = e;
      var n = {
        array: e,
        bool: e,
        func: e,
        number: e,
        object: e,
        string: e,
        symbol: e,
        any: e,
        arrayOf: t,
        element: e,
        elementType: e,
        instanceOf: t,
        node: e,
        objectOf: t,
        oneOf: t,
        oneOfType: t,
        shape: t,
        exact: t,
        checkPropTypes: i,
        resetWarningCache: o
      };
      return (n.PropTypes = n, n);
    });
  }, function (e, t, n) {
    "use strict";
    e.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  }]);
});
