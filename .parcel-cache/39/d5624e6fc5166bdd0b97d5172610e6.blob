var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require("react");
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _hooksUseFetch = require("./hooks/useFetch");
  require("react-bootstrap/Tabs");
  require("react-bootstrap/Tab");
  var _d3Array = require("d3-array");
  var _d3Scale = require("d3-scale");
  require("react-simple-maps");
  var _jsxFileName = "C:\\Users\\Pavel\\Desktop\\INFO\\474\\info474\\src\\assignment3\\Assignment3.js", _s = $RefreshSig$();
  const Assignment3 = () => {
    _s();
    const [data, loading] = _hooksUseFetch.useFetch("https://raw.githubusercontent.com/ZeningQu/World-Bank-Data-by-Indicators/master/social-protection-and-labor/social-protection-and-labor.csv");
    // Wrangling
    // Isolate to countries
    // List of country codes that aren't countries
    // Should not be included in the data set
    const badCodes = ["WLD", "ARB", "CSS", "CEB", "EAS", "EAP", "EMU", "ECS", "TEC", "ECA", "EUU", "FCS", "HPC", "LCN", "LAC", "LDC", "TMN", "MNA", "MEA", "NAC", "OED", "OSS", "PSS", "PST", "LTE", "EAR", "PRE", "SST", "TSA", "SAS", "TEA", "TLA", "TSS", "TEC", "IDA", "IDB", "IBD", "IBT", "IDX", "SSA", "SSF", "HIC", "LMY", "LIC", "LMC", "MIC", "UMC"];
    // Checks whether a country's code is included in the dataset
    const checkCode = d => {
      return !badCodes.includes(d["Country Code"]);
    };
    // The data we want to work with
    const dataCountriesOnly = data.filter(checkCode);
    const data2017 = dataCountriesOnly.filter(d => {
      return d.Year == 2017;
    });
    // Column names
    const women = "Labor force, female (% of total labor force)";
    const safetyNet = "Adequacy of social safety net programs (% of total welfare of beneficiary households)";
    const employChildren = "Children in employment, wage workers (% of children in employment, ages 7-14)";
    // Border designs. 500x500 but working area is 460 x 460
    const s = 500;
    // viz size
    const m = 20;
    // margin size
    const t = 4;
    // text alignment factor
    // Visualization one: Female Labor Force
    const halfCodeWidth = 30;
    const yLabels = x => /*#__PURE__*/_reactDefault.default.createElement(_reactDefault.default.Fragment, {
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 103,
        columnNumber: 5
      }
    }, /*#__PURE__*/_reactDefault.default.createElement("text", {
      x: x - 12,
      textAnchor: "end",
      y: m + t,
      style: {
        fontSize: 15,
        fontFamily: "Gill Sans, sans serif"
      },
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 104,
        columnNumber: 7
      }
    }, "100%"), /*#__PURE__*/_reactDefault.default.createElement("text", {
      x: x - 12,
      textAnchor: "end",
      y: s - m + t,
      style: {
        fontSize: 15,
        fontFamily: "Gill Sans, sans serif"
      },
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 112,
        columnNumber: 7
      }
    }, "0%"), /*#__PURE__*/_reactDefault.default.createElement("text", {
      x: x - 12,
      textAnchor: "end",
      y: s / 2 + t,
      style: {
        fontSize: 15,
        fontFamily: "Gill Sans, sans serif"
      },
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 120,
        columnNumber: 7
      }
    }, "50%"), /*#__PURE__*/_reactDefault.default.createElement("line", {
      x1: x - 10,
      y1: m,
      x2: x,
      y2: m,
      stroke: "black",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 128,
        columnNumber: 7
      }
    }), /*#__PURE__*/_reactDefault.default.createElement("line", {
      x1: x - 10,
      y1: s - m,
      x2: x,
      y2: s - m,
      stroke: "black",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 129,
        columnNumber: 7
      }
    }), /*#__PURE__*/_reactDefault.default.createElement("line", {
      x1: x - 10,
      y1: s / 2,
      x2: x,
      y2: s / 2,
      stroke: "black",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 130,
        columnNumber: 7
      }
    }));
    const yScale = _d3Scale.scaleLinear().domain([0, 100]).range([s - m, m]);
    // Visualization two: Female Labor Force, MENA highlight
    const MENA = ["DZA", "BHR", "EGY", "IRN", "IRQ", "ISR", "JOR", "KWT", "LBN", "LBY", "MAR", "OMN", "QAT", "SAU", "SYR", "TUN", "ARE", "YEM"];
    // Visualization three: Female Labor Force over time, World
    const femaleWorldTimeline = Array.from(_d3Array.rollup(dataCountriesOnly, v => _d3Array.mean(v, d => d[women]), d => +d.Year)).filter(d => {
      return d[1] != 0;
    }).sort().slice(1);
    // not large enough sample size in 1990
    const timeScale = _d3Scale.scaleLinear().domain([1991, 2017]).range([m * 2, s - m * 2]);
    // Visualization four: Change in female Labor Force as a percentage of total labor force from 1991 to 2017
    const dataFemChange = Array.from(_d3Array.group(dataCountriesOnly.filter(d => {
      return d.Year == 2017 || d.Year == 1991;
    }), d => d["Country Code"])).map(d => {
      return d[1].sort((a, b) => {
        return +a.Year > +b.Year;
      });
    }).filter(d => {
      return d.length == 2;
    });
    // Visualization Six: Scatterplot
    const radScale = _d3Scale.scaleSqrt().domain(_d3Array.extent(dataFemChange.map(d => {
      return +d[1][women] * 0.01 * +d[1]["Labor force, total"];
    }))).range([1, 30]);
    // Visualization Seven: Change in Deltas (histogram)
    const binForce = _d3Array.bin().thresholds(20);
    const bucketsForce = binForce(dataFemChange.map(d => {
      return +d[1][women] - d[0][women];
    }));
    const forceYScale = _d3Scale.scaleLinear().domain([0, _d3Array.max(bucketsForce.map(bin => {
      return bin.length;
    }))]).range([0, s - m * 2]);
    // Visualization Eight: Choropleth
    const geoUrl = "https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json";
    const colorScale = _d3Scale.scaleLinear().domain([0, 60]).range(["aliceblue", "steelblue"]);
    return (
      /*#__PURE__*/_reactDefault.default.createElement("div", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 232,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("h2", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 233,
          columnNumber: 7
        }
      }, "Assignment 3"), loading ? /*#__PURE__*/_reactDefault.default.createElement("p", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 235,
          columnNumber: 9
        }
      }, "loading data...") : /*#__PURE__*/_reactDefault.default.createElement("div", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 237,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("svg", {
        width: s,
        height: s,
        style: {
          border: "1px solid black"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 238,
          columnNumber: 11
        }
      }, yLabels(s / 2 - halfCodeWidth), data2017.map((d, i) => {
        if (d[women] != 0) {
          return (
            /*#__PURE__*/_reactDefault.default.createElement("line", {
              key: "barcode" + i,
              x1: s / 2 - halfCodeWidth,
              y1: yScale(d[women]),
              x2: s / 2 + halfCodeWidth,
              y2: yScale(d[women]),
              fill: "none",
              stroke: "steelblue",
              strokeOpacity: 0.33,
              __self: undefined,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 243,
                columnNumber: 19
              }
            })
          );
        }
      }))))
    );
  };
  _s(Assignment3, "Jm65JCcgUFoenM4DufkEA80vRVI=", false, function () {
    return [_hooksUseFetch.useFetch];
  });
  _c = Assignment3;
  exports.default = Assignment3;
  var _c;
  $RefreshReg$(_c, "Assignment3");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
